{"version":3,"sources":["types.ts","ZeroEx/validation/order-filled-cancelled-fetcher.ts","ZeroEx/validation/asset-balance-and-proxy-allowance-fetcher.ts","ZeroEx/ZeroEx.ts","ZeroEx/index.ts","SdkInitLifeCycle.ts","Ethereum.ts","Trade.ts","constants.ts","WebsocketClient.ts","errors/RadarError.ts","errors/ZeroExErrors.ts","errors/ErrorFormatter.ts","Market.ts","pagination/PaginatedCache.ts","pagination/MarketsCache.ts","RadarRelay.ts","accounts/BaseAccount.ts","accounts/LocalAccount.ts","accounts/RpcAccount.ts","accounts/InjectedAccount.ts","accounts/index.ts","SdkManager.ts","pagination/index.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import { TransactionOpts } from '0x.js';\nimport { ZeroEx } from '../src/ZeroEx';\nimport BigNumber from 'bignumber.js';\nimport Web3 = require('web3');\nimport { LocalAccount } from './accounts/LocalAccount';\nimport { RpcAccount } from './accounts/RpcAccount';\nimport { InjectedAccount } from './accounts/InjectedAccount';\nimport { Ethereum } from './Ethereum';\nimport { EventEmitter } from 'events';\nimport { RadarToken } from '@radarrelay/types';\nexport * from '@radarrelay/types';\n\nexport interface SdkConfig {\n  sdkInitializationTimeoutMs?: number;\n}\n\nexport interface EndpointConfig {\n  radarRestEndpoint: string;\n  radarWebsocketEndpoint: string;\n}\n\nexport interface OptionalEndpointConfig {\n  radarRestEndpoint?: string;\n  radarWebsocketEndpoint?: string;\n}\n\nexport interface EthereumConfig {\n  defaultGasPrice?: BigNumber;\n}\n\nexport interface InjectedWalletConfig extends SdkConfig, OptionalEndpointConfig, EthereumConfig {\n  type: InjectedWalletType;\n  web3?: Web3;\n  dataRpcUrl?: string;\n}\n\nexport interface LightWalletOptions {\n  password: string;\n  seedPhrase?: string;\n  salt?: string;\n  hdPathString?: string;\n}\n\nexport interface LightWalletConfig extends SdkConfig, EndpointConfig, EthereumConfig {\n  wallet: LightWalletOptions;\n  dataRpcUrl: string;\n}\n\nexport interface RpcWalletConfig extends SdkConfig, EndpointConfig, EthereumConfig {\n  rpcUrl: string;\n}\n\nexport interface Opts {\n  transactionOpts?: TransactionOpts;\n  awaitTransactionMined?: boolean;\n}\n\nexport enum WalletType {\n  Local,\n  Rpc,\n  Injected,\n  Ledger\n}\n\nexport enum InjectedWalletType {\n  Metmask = 'metamask'\n}\n\nexport enum InfuraNetwork {\n  Mainnet = 'mainnet',\n  Kovan = 'kovan',\n  Rinkeby = 'rinkeby',\n  Ropsten = 'ropsten',\n}\n\nexport enum NetwordId {\n  Mainnet = 1,\n  Kovan = 42,\n  Rinkeby = 4,\n  Ropsten = 3,\n}\n\nexport enum EventName {\n  Loading = 'loading',\n  EthereumInitialized = 'ethereumInitialized',\n  EthereumNetworkIdInitialized = 'ethereumNetworkIdInitialized' ,\n  ZeroExInitialized = 'zeroExInitialized',\n  TokensInitialized = 'tokensInitialized',\n  AccountInitialized = 'accountInitialized',\n  TradeInitialized = 'tradeInitialized',\n  MarketsInitialized = 'marketsInitialized',\n  TransactionPending = 'transactionPending',\n  TransactionComplete = 'transactionComplete',\n  AddressChanged = 'addressChanged'\n}\n\nexport enum SdkError {\n  InvalidOrMissingEndpoints = 'INVALID_OR_MISSING_RADAR_RELAY_ENDPOINTS',\n  WebSocketDisconnected = 'WEBSOCKET_DISCONNECTED',\n  UnableToRetrieveAccount = 'UNABLE_TO_RETRIEVE_ACCOUNT'\n}\n\nexport type RpcConnection = string | InfuraNetwork;\n\nexport type Account = LocalAccount | RpcAccount | InjectedAccount;\n\nexport type Config = LightWalletConfig | RpcWalletConfig | InjectedWalletConfig;\n\nexport interface AccountParams {\n  ethereum: Ethereum;\n  events: EventEmitter;\n  zeroEx: ZeroEx;\n  endpoint: string;\n  tokens: Map<string, RadarToken>;\n}\n","// Vendor\nimport { BlockParamLiteral, ExchangeWrapper } from '@0xproject/contract-wrappers';\nimport { AbstractOrderFilledCancelledFetcher } from '@0xproject/order-utils';\nimport { BigNumber } from 'bignumber.js';\n\nexport class OrderFilledCancelledFetcher implements AbstractOrderFilledCancelledFetcher {\n\n  // --- Properties --- //\n\n  private readonly _exchange: ExchangeWrapper;\n  private readonly _stateLayer: BlockParamLiteral;\n\n  // --- Constructor --- //\n\n  constructor(exchange: ExchangeWrapper, stateLayer: BlockParamLiteral) {\n    this._exchange = exchange;\n    this._stateLayer = stateLayer;\n  }\n\n  // --- Exposed methods --- //\n\n  public async getFilledTakerAmountAsync(orderHash: string): Promise<BigNumber> {\n    return this._exchange.getFilledTakerAssetAmountAsync(orderHash, {\n      defaultBlock: this._stateLayer,\n    });\n  }\n\n  public async isOrderCancelledAsync(orderHash: string): Promise<boolean> {\n    return this._exchange.isCancelledAsync(orderHash);\n  }\n\n  public getZRXAssetData(): string {\n    return this._exchange.getZRXAssetData();\n  }\n\n}\n","// Vendor\nimport { BlockParamLiteral, ERC20TokenWrapper, ERC721TokenWrapper } from '@0xproject/contract-wrappers';\nimport { AbstractBalanceAndProxyAllowanceFetcher, assetDataUtils } from '@0xproject/order-utils';\nimport { AssetProxyId, ERC20AssetData, ERC721AssetData } from '@0xproject/types';\nimport { BigNumber } from 'bignumber.js';\n\nexport class AssetBalanceAndProxyAllowanceFetcher implements AbstractBalanceAndProxyAllowanceFetcher {\n\n  // --- Properties --- //\n\n  private readonly _erc20Token: ERC20TokenWrapper;\n  private readonly _erc721Token: ERC721TokenWrapper;\n  private readonly _stateLayer: BlockParamLiteral;\n\n  // --- Constructor --- //\n\n  constructor(erc20Token: ERC20TokenWrapper, erc721Token: ERC721TokenWrapper, stateLayer: BlockParamLiteral) {\n    this._erc20Token = erc20Token;\n    this._erc721Token = erc721Token;\n    this._stateLayer = stateLayer;\n  }\n\n  // --- Exposed methods --- //\n\n  public async getBalanceAsync(assetData: string, userAddress: string): Promise<BigNumber> {\n    const decodedAssetData = assetDataUtils.decodeAssetDataOrThrow(assetData);\n    if (decodedAssetData.assetProxyId === AssetProxyId.ERC20) {\n      const decodedERC20AssetData = decodedAssetData as ERC20AssetData;\n      const balance = await this._erc20Token.getBalanceAsync(decodedERC20AssetData.tokenAddress, userAddress, {\n        defaultBlock: this._stateLayer,\n      });\n      return balance;\n    } else {\n      const decodedERC721AssetData = decodedAssetData as ERC721AssetData;\n      const tokenOwner = await this._erc721Token.getOwnerOfAsync(\n        decodedERC721AssetData.tokenAddress,\n        decodedERC721AssetData.tokenId,\n        {\n          defaultBlock: this._stateLayer,\n        },\n      );\n      const balance = tokenOwner === userAddress ? new BigNumber(1) : new BigNumber(0);\n      return balance;\n    }\n  }\n\n  public async getProxyAllowanceAsync(assetData: string, userAddress: string): Promise<BigNumber> {\n    const decodedAssetData = assetDataUtils.decodeAssetDataOrThrow(assetData);\n    if (decodedAssetData.assetProxyId === AssetProxyId.ERC20) {\n      const decodedERC20AssetData = decodedAssetData as ERC20AssetData;\n      const proxyAllowance = await this._erc20Token.getProxyAllowanceAsync(\n        decodedERC20AssetData.tokenAddress,\n        userAddress,\n        {\n          defaultBlock: this._stateLayer,\n        },\n      );\n      return proxyAllowance;\n    } else {\n      const decodedERC721AssetData = decodedAssetData as ERC721AssetData;\n\n      const isApprovedForAll = await this._erc721Token.isProxyApprovedForAllAsync(\n        decodedERC721AssetData.tokenAddress,\n        userAddress,\n        {\n          defaultBlock: this._stateLayer,\n        },\n      );\n      if (isApprovedForAll) {\n        return new BigNumber(this._erc20Token.UNLIMITED_ALLOWANCE_IN_BASE_UNITS);\n      } else {\n        const isApproved = await this._erc721Token.isProxyApprovedAsync(\n          decodedERC721AssetData.tokenAddress,\n          decodedERC721AssetData.tokenId,\n          {\n            defaultBlock: this._stateLayer,\n          },\n        );\n        const proxyAllowance = isApproved ? new BigNumber(1) : new BigNumber(0);\n        return proxyAllowance;\n      }\n    }\n  }\n\n}\n","// Vendor\nimport { Web3Wrapper } from '@0xproject/web3-wrapper';\nimport {\n  Provider,\n  ContractWrappers,\n  ContractWrappersConfig,\n  ExchangeWrapper,\n  EtherTokenWrapper,\n  ERC20TokenWrapper,\n  ERC20ProxyWrapper,\n  Order,\n  SignedOrder,\n  SignerType,\n  ERC721TokenWrapper,\n  BlockParamLiteral,\n  orderHashUtils,\n  signatureUtils,\n} from '0x.js';\nimport {\n  OrderValidationUtils,\n  ExchangeTransferSimulator,\n  BalanceAndProxyAllowanceLazyStore,\n} from '@0xproject/order-utils';\nimport BigNumber from 'bignumber.js';\n\n// Internal\nimport { OrderFilledCancelledFetcher } from './validation/order-filled-cancelled-fetcher';\nimport { AssetBalanceAndProxyAllowanceFetcher } from './validation/asset-balance-and-proxy-allowance-fetcher';\n\nexport class ZeroEx {\n\n  // --- Properties --- //\n\n  public exchange: ExchangeWrapper;\n  public erc20Token: ERC20TokenWrapper;\n  public etherToken: EtherTokenWrapper;\n  public erc20Proxy: ERC20ProxyWrapper;\n  public erc721Token: ERC721TokenWrapper;\n\n  private readonly _provider: Provider;\n  private readonly _contractWrappers: ContractWrappers;\n  private readonly _web3WrapperInstance: Web3Wrapper;\n  private readonly _exchangeContractAddress: string;\n  private readonly _zrxAssetData: string;\n  private readonly _orderValidationUtils: OrderValidationUtils;\n  private readonly _exchangeTransferSimulator: ExchangeTransferSimulator;\n\n  // --- Constructor --- //\n\n  constructor(\n    provider: Provider,\n    config: ContractWrappersConfig,\n  ) {\n\n    this._provider = provider;\n    this._web3WrapperInstance = new Web3Wrapper(provider);\n\n    // Create contract wrappers\n    this._contractWrappers = new ContractWrappers(provider, config);\n    this.exchange = this._contractWrappers.exchange;\n    this.erc20Proxy = this._contractWrappers.erc20Proxy;\n    this.erc20Token = this._contractWrappers.erc20Token;\n    this.erc721Token = this._contractWrappers.erc721Token;\n    this.etherToken = this._contractWrappers.etherToken;\n\n    // Set contract address\n    this._exchangeContractAddress = this.exchange.getContractAddress();\n\n    // Create order validation utils\n    this._zrxAssetData = this.exchange.getZRXAssetData();\n    const simpleOrderFilledCancelledFetcher = new OrderFilledCancelledFetcher(this.exchange, BlockParamLiteral.Latest);\n    this._orderValidationUtils = new OrderValidationUtils(simpleOrderFilledCancelledFetcher);\n    const assetBalanceAndProxyAllowanceFetcher = new AssetBalanceAndProxyAllowanceFetcher(\n      this.erc20Token,\n      this.erc721Token,\n      BlockParamLiteral.Latest\n    );\n    const balanceAndProxyAllowanceLazyStore = new BalanceAndProxyAllowanceLazyStore(\n      assetBalanceAndProxyAllowanceFetcher\n    );\n    this._exchangeTransferSimulator = new ExchangeTransferSimulator(balanceAndProxyAllowanceLazyStore);\n  }\n\n  // --- Exposed methods --- //\n\n  /**\n   * When creating an order without a specified taker or feeRecipient you must supply the Solidity\n   * address null type (as opposed to Javascripts `null`, `undefined` or empty string). We expose\n   * this constant for your convenience.\n   */\n  public static NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\n  /**\n   * Get exchange contract address\n   * @public\n   * @return string  The exchange contract address\n   */\n  public getExchangeContractAddress(): string {\n    return this._exchangeContractAddress;\n  }\n\n  /**\n   * A unit amount is defined as the amount of a token above the specified decimal places (integer part).\n   * E.g: If a currency has 18 decimal places, 1e18 or one quintillion of the currency is equivalent\n   * to 1 unit.\n   * @param   amount      The amount in baseUnits that you would like converted to units.\n   * @param   decimals    The number of decimal places the unit amount has.\n   * @return  The amount in units.\n   */\n  public static toUnitAmount(amount: BigNumber, decimals: number): BigNumber {\n    return Web3Wrapper.toUnitAmount(amount, decimals);\n  }\n\n  /**\n   * Convert to Base Unit Amount\n   * A baseUnit is defined as the smallest denomination of a token. An amount expressed in baseUnits\n   * is the amount expressed in the smallest denomination.\n   * E.g: 1 unit of a token with 18 decimal places is expressed in baseUnits as 1000000000000000000\n   * @param   amount      The amount of units that you would like converted to baseUnits.\n   * @param   decimals    The number of decimal places the unit amount has.\n   * @return  The amount in baseUnits.\n   */\n  public static toBaseUnitAmount(amount: BigNumber, decimals: number): BigNumber {\n    return Web3Wrapper.toBaseUnitAmount(amount, decimals);\n  }\n\n  /**\n   * Computes the orderHash for a supplied order.\n   * @param   order   An object that conforms to the Order or SignedOrder interface definitions.\n   * @return  The resulting orderHash from hashing the supplied order.\n   */\n  public static getOrderHashHex(order: Order | SignedOrder): string {\n    return orderHashUtils.getOrderHashHex(order);\n  }\n\n  /**\n   * Returns the current timestamp in milliseconds, which is used for the salt.\n   * The salt can be included in a 0x order. This ensures that the order generates\n   * a unique orderHash and allows orders to be canceled using CancelUpTo.\n   */\n  public static generateSaltTimestamp(): BigNumber {\n    return new BigNumber(Date.now());\n  }\n\n  /**\n   * Waits for a transaction to be mined and returns the transaction receipt.\n   * Note that just because a transaction was mined does not mean it was\n   * successful. You need to check the status code of the transaction receipt\n   * to find out if it was successful, or use the helper method\n   * awaitTransactionSuccessAsync.\n   * @param   txHash            Transaction hash\n   * @param   pollingIntervalMs How often (in ms) should we check if the transaction is mined.\n   * @param   timeoutMs         How long (in ms) to poll for transaction mined until aborting.\n   * @return  Transaction receipt with decoded log args.\n   */\n  public async awaitTransactionMinedAsync(txHash: string, pollingInterval?: number, timeoutMs?: number) {\n    // Additional logic here to workaround this issue: https://github.com/0xProject/0x-monorepo/issues/1076\n    const receipt = await this._web3WrapperInstance.awaitTransactionMinedAsync(txHash, pollingInterval, timeoutMs);\n    if (!receipt || (receipt && receipt.blockNumber === null)) return null;\n    return receipt;\n  }\n\n  /**\n   * Retrieves the transaction receipt for a given transaction hash\n   * @param txHash Transaction hash\n   * @returns The transaction receipt, including it's status (0: failed, 1: succeeded or undefined: not found)\n   */\n  public async getTransactionReceiptAsync(txHash: string) {\n    // Additional logic here to workaround this issue: https://github.com/0xProject/0x-monorepo/issues/1076\n    const receipt = await this._web3WrapperInstance.getTransactionReceiptAsync(txHash);\n    if (!receipt || (receipt && receipt.blockNumber === null)) return null;\n    return receipt;\n  }\n\n  /**\n   * Signs an orderHash and returns it's elliptic curve signature and signature type.\n   * This method currently supports TestRPC, Geth and Parity above and below V1.6.6\n   * @param   orderHash       Hex encoded orderHash to sign.\n   * @param   signerAddress   The hex encoded Ethereum address you wish to sign it with. This address\n   *          must be available via the Provider supplied to 0x.js.\n   * @param   signerType Different signers add/require different prefixes to be prepended to the message being signed.\n   *          Since we cannot know ahead of time which signer you are using, you must supply a SignerType.\n   * @return  A hex encoded string containing the Elliptic curve signature generated by signing the orderHash and the Signature Type.\n   */\n  public async ecSignOrderHashAsync(\n      orderHash: string,\n      signerAddress: string,\n      signerType: SignerType,\n  ): Promise<string> {\n      return signatureUtils.ecSignOrderHashAsync(\n        this._provider,\n        orderHash,\n        signerAddress,\n        signerType,\n      );\n  }\n\n  /**\n   * Validate that a signed order is fillable or throw\n   * @param signedOrder The signed order to validate\n   */\n  public async validateOrderFillableOrThrowAsync(signedOrder: SignedOrder) {\n    return this._orderValidationUtils.validateOrderFillableOrThrowAsync(\n      this._exchangeTransferSimulator,\n      signedOrder,\n      this._zrxAssetData\n    );\n  }\n\n}\n","export * from './ZeroEx';\n","\nimport { EventEmitter } from 'events';\nimport { EventName } from './types';\n\nexport interface InitPriorityItem {\n  // the event that is triggered\n  // (via the EventEmitter) when this function finishes\n  event: string;\n\n  // function to be called in the main SDK class\n  func: any;\n\n  // optional args to pass to\n  // the event callback\n  args?: any[];\n}\n\nexport class SdkInitLifeCycle {\n\n  // --- Properties --- //\n\n  private _priorityList: InitPriorityItem[];\n  private _events: EventEmitter;\n  private _priority: {} = {};\n  private _current: number;\n  private _last: number;\n  private _startTime: number;\n  private _timeout: number;\n  private _runInterval: any;\n\n  // --- Constructor --- //\n\n  constructor(events: EventEmitter, priorityList: InitPriorityItem[], timeout: number = 10000) {\n    this._priorityList = priorityList;\n    this._events = events;\n    this._timeout = timeout;\n\n    // Setup the priority event map and\n    // event handlers which maintains\n    // the current loaded event priority\n    this._last = (priorityList.length - 1);\n    for (const index in priorityList) {\n      if (priorityList.hasOwnProperty(index)) {\n        const item = priorityList[index];\n        this._priority[item.event] = index;\n        this._events.on(item.event, this._handleEvent.bind(this, item.event));\n      }\n    }\n  }\n\n  // --- Exposed methods --- //\n\n  // Bind the function calls that will\n  // get called in order of the priorityList.\n  //\n  // The scope is the class that the\n  // functions belong to.\n  public setup(scope): void {\n    for (const item of this._priorityList) {\n      if (item.func) {\n        if (item.args) {\n          this._events.on(item.event, item.func.bind(scope, ...item.args));\n        } else {\n          this._events.on(item.event, item.func.bind(scope));\n        }\n      }\n    }\n  }\n\n  public promise(event: string): Promise<boolean | string> {\n    if (this._runInterval) return Promise.resolve(true);\n\n    this._current = this._priority[event];\n    this._startTime = new Date().getTime();\n    return new Promise((resolve, reject) => {\n      this._runInterval = setInterval(this._checkEventProgress.bind(this, resolve, reject), 100);\n    });\n  }\n\n  // --- Internal methods --- //\n\n  private _checkEventProgress(resolve, reject): Promise<boolean | string> {\n    const now = new Date().getTime();\n    if (now - this._startTime >= this._timeout) {\n      clearInterval(this._runInterval);\n      this._runInterval = undefined;\n      return reject(`SDK init lifecycle timed out after ${this._timeout}ms`);\n    }\n\n    if (this._current >= this._last) {\n      clearInterval(this._runInterval);\n      this._runInterval = undefined;\n      return resolve(true);\n    }\n  }\n\n  private _handleEvent(event: string): void {\n    const current = this._priority[event];\n    this._current = (current >= this._current) ? current : this._current;\n\n    const progressPerc = Math.floor((this._current / this._last) * 100);\n    this._events.emit(EventName.Loading, {\n      progress: progressPerc || 0,\n      elapsedTime: (new Date().getTime() - this._startTime),\n      source: this.constructor.name + ':' + event\n    });\n  }\n\n}\n","// Vendor\nimport Web3 = require('web3');\nimport BigNumber from 'bignumber.js';\nimport { promisify } from 'es6-promisify';\nimport { LightWalletManager, LightWallet, WalletError } from '@radarrelay/wallet-manager';\nimport { Web3Builder } from '@radarrelay/web3-builder';\nimport { EthLightwalletSubprovider, SignerSubprovider } from '@0xproject/subproviders';\n\n// Internal\nimport {\n  WalletType,\n  LightWalletConfig,\n  RpcWalletConfig,\n  InjectedWalletConfig,\n  Config,\n  SdkError,\n} from './types';\n\n/**\n * Ethereum\n */\nexport class Ethereum {\n\n  // --- Properties --- //\n\n  public wallet: LightWallet;\n  public walletType: WalletType;\n  public networkId: number;\n  public web3: Web3;\n\n  private _config: Config;\n\n  // --- Exposed methods --- //\n\n  /**\n   * Set the provider\n   *\n   * @param {WalletType} type The wallet type\n   * @param {Config} config The wallet config\n   */\n  public async setProvider(type: WalletType, config: Config) {\n    this._config = config;\n\n    switch (type) {\n      case WalletType.Local:\n        await this._setLightWalletProvider(this._config as LightWalletConfig);\n        break;\n      case WalletType.Rpc:\n        this._setRpcWalletProvider(this._config as RpcWalletConfig);\n        break;\n      case WalletType.Injected:\n        this._setInjectedWalletProvider(this._config as InjectedWalletConfig);\n        break;\n    }\n  }\n\n  /**\n   * Default account getter\n   */\n  public get defaultAccount(): string {\n    return this.web3.eth.defaultAccount;\n  }\n\n  /**\n   * Get the ether balance for an account\n   *\n   * @param {string} address The address\n   */\n  public async getEthBalanceAsync(address: string): Promise<BigNumber> {\n    const bal = await promisify(cb => this.web3.eth.getBalance(address, cb))();\n    return new BigNumber(bal);\n  }\n\n  /**\n   * Transfer ether to another account\n   *\n   * @param {string} from The from address\n   * @param {string} to The to address\n   * @param {BigNumber} value The value to transfer\n   */\n  public async transferEthAsync(\n    from: string, to: string, value: BigNumber, opts?: { gasPrice: BigNumber, gas: number }\n  ): Promise<string> {\n    const params: Web3.TxData = { from, to, value: this.web3.toWei(value, 'ether') };\n    if (opts.gasPrice) {\n      params.gasPrice = opts.gasPrice;\n    }\n    if (opts.gas) {\n      params.gas = opts.gas;\n    }\n    return promisify(cb => this.web3.eth.sendTransaction(params, cb))();\n  }\n\n  /**\n   * Get the RPC Connections networkId\n   */\n  public async getNetworkIdAsync(): Promise<number> {\n    const networkId: string = await promisify(this.web3.version.getNetwork)();\n    this.networkId = parseInt(networkId, 10);\n    return this.networkId;\n  }\n\n  /**\n   * Set ETH defaultAccount to a new address index or address\n   *\n   * @param {number|string}  account The account index or address\n   */\n  public async setDefaultAccount(account: number | string): Promise<void> {\n    const accounts = await promisify(this.web3.eth.getAccounts)();\n    if (typeof (account) === 'number') {\n      if (typeof (accounts[account]) === 'undefined') throw new Error(SdkError.UnableToRetrieveAccount);\n      this.web3.eth.defaultAccount = accounts[account];\n    } else {\n      let found = false;\n      accounts.map(address => {\n        if (address === account) {\n          found = true;\n          this.web3.eth.defaultAccount = address;\n        }\n      });\n      if (!found) throw new Error(SdkError.UnableToRetrieveAccount);\n    }\n  }\n\n  // --- Internal methods --- //\n\n  /**\n   * Set the local LightWallet Provider\n   *\n   * @param {config} LightWalletConfig The LightWallet configuration\n   */\n  private async _setLightWalletProvider(config: LightWalletConfig) {\n    // attempt to load existing light wallet\n    let wallet: LightWallet;\n    try {\n      wallet = await LightWalletManager.loadWalletAsync(config.wallet.password);\n    } catch (err) {\n      if (err.message === WalletError.NoWalletFound) {\n        // create a new light wallet\n        wallet = await LightWalletManager.createWalletAsync(config.wallet);\n      } else {\n        throw new Error(err.message);\n      }\n    }\n\n    this.wallet = wallet;\n    this.web3 = Web3Builder.createWeb3(new EthLightwalletSubprovider(\n      wallet.keystore, wallet.pwDerivedKey\n    ), config.dataRpcUrl, true);\n  }\n\n  /**\n   * Set injected wallet provider\n   *\n   * @param {config} InjectedWalletConfig The InjectedWallet config\n   */\n  private _setInjectedWalletProvider(config: InjectedWalletConfig) {\n    // Default to window.web3\n    const defaultWeb3 = (window as any).web3;\n\n    if (!config.dataRpcUrl) {\n      this.web3 = config.web3 || defaultWeb3;\n    } else {\n      this.web3 = Web3Builder.createWeb3(\n        new SignerSubprovider(config.web3.currentProvider),\n        config.dataRpcUrl, true);\n    }\n  }\n\n  /**\n   * Set the rpc wallet provider\n   *\n   * @param {config} RpcWalletConfig The RpcWallet config\n   */\n  private _setRpcWalletProvider(config: RpcWalletConfig): void {\n    const provider = new Web3.providers.HttpProvider(config.rpcUrl);\n    this.web3 = new Web3(provider);\n  }\n\n}\n","// Vendor\nimport { EventEmitter } from 'events';\nimport { SignerType } from '0x.js';\nimport { TransactionReceiptWithDecodedLogs } from 'ethereum-types';\nimport { UserOrderType, RadarMarketOrderResponse, UnsignedOrder, SignedOrder } from '@radarrelay/types';\nimport BigNumber from 'bignumber.js';\nimport axios, { AxiosResponse } from 'axios';\n\n// Internal\nimport { Market } from './Market';\nimport { WalletType, Opts, EventName } from './types';\nimport { ZeroEx } from './ZeroEx';\nimport { BaseAccount } from './accounts';\n\nexport class Trade<T extends BaseAccount> {\n\n  // --- Properties --- //\n\n  private _endpoint: string;\n  private _account: T;\n  private _zeroEx: ZeroEx;\n  private _events: EventEmitter;\n\n  // --- Constructor --- //\n\n  constructor(zeroEx: ZeroEx, apiEndpoint: string, account: T, events: EventEmitter) {\n    this._zeroEx = zeroEx;\n    this._endpoint = apiEndpoint;\n    this._account = account;\n    this._events = events;\n  }\n\n  // --- Exposed methods --- //\n\n  public async marketOrder(\n    market: Market<T>,\n    type: UserOrderType,\n    quantity: BigNumber,\n    opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const axiosResponse: AxiosResponse<RadarMarketOrderResponse> = await axios.post(\n      `${this._endpoint}/markets/${market.id}/order/market`, {\n        type,\n        quantity: quantity.toString(), // base token in unit amounts, which is what our interfaces use\n      },\n    );\n\n    const marketResponse = axiosResponse.data;\n\n    marketResponse.orders.forEach((order, i) => this.hydrateSignedOrder(order));\n\n    let txHash: string;\n    if (marketResponse.orders.length === 1) {\n      // Save gas by executing a fill order if only one order was returned\n      txHash = await this._zeroEx.exchange.fillOrderAsync(\n        marketResponse.orders[0],\n        ZeroEx.toBaseUnitAmount(quantity, market.baseTokenDecimals),\n        this._account.address,\n        opts.transactionOpts);\n    } else {\n      const fn = type === UserOrderType.BUY ? 'marketBuyOrdersAsync' : 'marketSellOrdersAsync';\n      txHash = await this._zeroEx.exchange[fn](\n        marketResponse.orders,\n        ZeroEx.toBaseUnitAmount(quantity, market.baseTokenDecimals),\n        this._account.address,\n        opts.transactionOpts);\n    }\n\n    this._events.emit(EventName.TransactionPending, txHash);\n\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    const receipt = await this._zeroEx.awaitTransactionMinedAsync(txHash);\n    this._events.emit(EventName.TransactionComplete, receipt);\n    return receipt;\n  }\n\n  // sign and post order to book\n  public async limitOrder(\n    market: Market<T> = null,\n    type: UserOrderType, // ask == sell, bid == buy\n    quantity: BigNumber, // base token quantity\n    price: BigNumber, // price (in quote)\n    expiration: BigNumber // expiration in seconds from now\n  ): Promise<SignedOrder> {\n\n    const axiosResponse: AxiosResponse<UnsignedOrder> = await axios.post(\n      `${this._endpoint}/markets/${market.id}/order/limit`, {\n        type,\n        quantity: quantity.toString(), // base token in unit amounts, which is what our interfaces use\n        price: price.toString(),\n        expiration: expiration.toString(),\n      },\n    );\n\n    const order: SignedOrder = axiosResponse.data;\n\n    // Transform BigNumbers\n    this.hydrateSignedOrder(order);\n\n    // Add missing data\n    order.makerAddress = this._account.address;\n\n    // Sign order\n    const prefix: SignerType = (this._account.type === WalletType.Injected) ? SignerType.Metamask : SignerType.Default;\n    const orderHash = ZeroEx.getOrderHashHex(order);\n    const signature = await this._zeroEx.ecSignOrderHashAsync(orderHash, this._account.address, prefix);\n    order.signature = signature;\n\n    // POST order to API\n    // HACK for local dev order seeding\n    const orderPostURL = process.env.RADAR_SDK_ORDER_URL\n      ? process.env.RADAR_SDK_ORDER_URL\n      : `${this._endpoint}/orders`;\n\n    await axios.post(orderPostURL, order);\n\n    return order;\n  }\n\n  // TODO fill individual order\n\n  // cancel a signed order\n  // TODO cancel partial?\n  public async cancelOrderAsync(\n    order: SignedOrder, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const txHash = await this._zeroEx.exchange.cancelOrderAsync(order, opts.transactionOpts);\n    this._events.emit(EventName.TransactionPending, txHash);\n\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n\n    const receipt = await this._zeroEx.awaitTransactionMinedAsync(txHash);\n    this._events.emit(EventName.TransactionComplete, receipt);\n    return receipt;\n  }\n\n  /**\n   * Transform all BigNumber fields from string (request) to BigNumber. This is needed for a\n   * correct hashing and signature.\n   * @param order a signedOrder from DB or user input, that have strings instead of BigNumbers\n   */\n  public hydrateSignedOrder(order: SignedOrder): SignedOrder {\n    order.salt = new BigNumber(order.salt);\n    order.makerFee = new BigNumber(order.makerFee);\n    order.takerFee = new BigNumber(order.takerFee);\n    order.makerAssetAmount = new BigNumber(order.makerAssetAmount);\n    order.takerAssetAmount = new BigNumber(order.takerAssetAmount);\n    order.expirationTimeSeconds = new BigNumber(order.expirationTimeSeconds);\n    return order;\n  }\n\n}\n","import { EndpointConfig, NetwordId } from './types';\n\nexport const RADAR_RELAY_ENDPOINTS = (network: NetwordId): EndpointConfig => {\n  switch (network) {\n    case NetwordId.Mainnet:\n      return {\n        radarRestEndpoint: 'https://api.radarrelay.com/v2',\n        radarWebsocketEndpoint: 'wss://ws.radarrelay.com/v2'\n      };\n    case NetwordId.Kovan:\n      return {\n        radarRestEndpoint: 'https://api.kovan.radarrelay.com/v2',\n        radarWebsocketEndpoint: 'wss://ws.kovan.radarrelay.com/ws',\n      };\n    default:\n      throw new Error(`Unsupported Network: ${NetwordId[network] || 'Unknown'}`);\n  }\n};\n","import { RadarSubscribeRequest, WebsocketRequestType } from '@radarrelay/types';\nimport { w3cwebsocket } from 'websocket';\nimport { SdkError } from './types';\n\n/**\n * Websocket client helper class\n * for websocket connection handling\n */\nexport class WebsocketClient {\n\n  // --- Properties --- //\n\n  public connected: boolean;\n\n  private _client: w3cwebsocket;\n  private _connectPromise;\n  private _wsEndpoint: string;\n  private _subscriptions: {} = {};\n  private _curSubID: number = 0;\n\n  // --- Constructor --- //\n\n  constructor(wsEndpoint: string) {\n    this._wsEndpoint = wsEndpoint;\n  }\n\n  // --- Exposed methods --- //\n\n  /**\n   * Event listener for global connection events\n   */\n  public on(event: 'connect' | 'error' | 'disconnect' | 'message', handlerFunction) {\n    // TODO\n  }\n\n  /**\n   * Create a Radar subscription\n   *\n   * @param {RadarSubscribeRequest} subscribeRequest The subscribe request\n   * @param {function} subscriptionHandler The subscription handler\n   */\n  public subscribe(\n    subscribeRequest: RadarSubscribeRequest,\n    subscriptionHandler: (messsage: any) => void\n  ): {\n    requestId: number,\n    subscriptionHandler: (messsage: any) => void,\n    unsubscribe: () => void\n  } {\n    if (!this._clientIsConnected) throw new Error(SdkError.WebSocketDisconnected);\n    this._curSubID = this._curSubID + 1;\n    subscribeRequest.requestId = this._curSubID;\n    this._client.send(JSON.stringify(subscribeRequest));\n    this._subscriptions[this._curSubID] = {\n      requestId: this._curSubID,\n      subscriptionHandler,\n      unsubscribe: () => {\n        // Send unsubscribe for this subscribe request\n        (subscribeRequest as any).type = WebsocketRequestType.UNSUBSCRIBE;\n        this._client.send(JSON.stringify(subscribeRequest));\n      }\n    };\n\n    return this._subscriptions[this._curSubID];\n  }\n\n  /**\n   * Open a connection to the Radar Relay WebSocket API\n   */\n  public async connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        this._client = new w3cwebsocket(this._wsEndpoint);\n        this._client.onopen = this._connectHandler.bind(this);\n        this._client.onerror = this._errorHandler.bind(this);\n        this._client.onclose = this._closeHandler.bind(this);\n        this._client.onmessage = this._messageHandler.bind(this);\n      } catch (err) {\n        reject(err);\n      }\n\n      this._connectPromise = {\n        resolve, reject\n      };\n    });\n  }\n\n  // --- Internal methods --- //\n\n  /**\n   * Default connection handler\n   *\n   * @param {Event} conn The open event\n   */\n  private _connectHandler(conn: Event) {\n    this.connected = true;\n    if (this._connectPromise) {\n      this._connectPromise.resolve(conn);\n    }\n  }\n\n  /**\n   * Default close handler\n   *\n   * @param {CloseEvent} closed The close event\n   */\n  private _closeHandler(closed: CloseEvent) {\n    this.connected = false;\n    this._client = undefined;\n    this._connectPromise = undefined;\n    this._subscriptions = {};\n    console.log('closed', closed);\n  }\n\n  /**\n   * Default error handler\n   *\n   * @param {Event} err The error event\n   */\n  private _errorHandler(err: Event) {\n    this.connected = false;\n    if (this._connectPromise) {\n      this._client = undefined;\n      this._connectPromise.reject(err);\n    }\n    console.log('err', err);\n  }\n\n  /**\n   * Handle a message passing it to\n   * the active subscription if it exists\n   *\n   * @param {MessageEvent} message The message event\n   */\n  private _messageHandler(message: MessageEvent) {\n\n    if (this._subscriptions) {\n      if (typeof (message.data) === 'string') {\n        let parsed;\n        try {\n          parsed = JSON.parse(message.data);\n          if (parsed.requestId && this._subscriptions[parsed.requestId]) {\n            this._subscriptions[parsed.requestId].subscriptionHandler(parsed);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        console.log(message);\n      }\n    }\n  }\n\n  /**\n   * Detect if the WebSocket client is connected\n   */\n  private _clientIsConnected() {\n    return this._client && (this._client.readyState === this._client.OPEN);\n  }\n}\n","export class RadarError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n","enum ContractWrappersError {\n  ExchangeContractDoesNotExist = 'EXCHANGE_CONTRACT_DOES_NOT_EXIST',\n  ZRXContractDoesNotExist = 'ZRX_CONTRACT_DOES_NOT_EXIST',\n  EtherTokenContractDoesNotExist = 'ETHER_TOKEN_CONTRACT_DOES_NOT_EXIST',\n  TokenTransferProxyContractDoesNotExist = 'TOKEN_TRANSFER_PROXY_CONTRACT_DOES_NOT_EXIST',\n  TokenRegistryContractDoesNotExist = 'TOKEN_REGISTRY_CONTRACT_DOES_NOT_EXIST',\n  TokenContractDoesNotExist = 'TOKEN_CONTRACT_DOES_NOT_EXIST',\n  ContractNotDeployedOnNetwork = 'CONTRACT_NOT_DEPLOYED_ON_NETWORK',\n  InsufficientAllowanceForTransfer = 'INSUFFICIENT_ALLOWANCE_FOR_TRANSFER',\n  InsufficientBalanceForTransfer = 'INSUFFICIENT_BALANCE_FOR_TRANSFER',\n  InsufficientEthBalanceForDeposit = 'INSUFFICIENT_ETH_BALANCE_FOR_DEPOSIT',\n  InsufficientWEthBalanceForWithdrawal = 'INSUFFICIENT_WETH_BALANCE_FOR_WITHDRAWAL',\n  InvalidJump = 'INVALID_JUMP',\n  OutOfGas = 'OUT_OF_GAS',\n  SubscriptionNotFound = 'SUBSCRIPTION_NOT_FOUND',\n  SubscriptionAlreadyPresent = 'SUBSCRIPTION_ALREADY_PRESENT',\n}\n\nenum OrderError {\n  InvalidSignature = 'INVALID_SIGNATURE',\n}\n\nenum BlockchainCallErrs {\n  ContractDoesNotExist = 'CONTRACT_DOES_NOT_EXIST',\n  UserHasNoAssociatedAddresses = 'USER_HAS_NO_ASSOCIATED_ADDRESSES',\n  UnhandledError = 'UNHANDLED_ERROR',\n  TokenAddressIsInvalid = 'TOKEN_ADDRESS_IS_INVALID',\n}\n\nenum ExchangeContractErrs {\n  OrderFillExpired = 'ORDER_FILL_EXPIRED',\n  OrderCancelExpired = 'ORDER_CANCEL_EXPIRED',\n  OrderCancelAmountZero = 'ORDER_CANCEL_AMOUNT_ZERO',\n  OrderAlreadyCancelledOrFilled = 'ORDER_ALREADY_CANCELLED_OR_FILLED',\n  OrderFillAmountZero = 'ORDER_FILL_AMOUNT_ZERO',\n  OrderRemainingFillAmountZero = 'ORDER_REMAINING_FILL_AMOUNT_ZERO',\n  OrderFillRoundingError = 'ORDER_FILL_ROUNDING_ERROR',\n  FillBalanceAllowanceError = 'FILL_BALANCE_ALLOWANCE_ERROR',\n  InsufficientTakerBalance = 'INSUFFICIENT_TAKER_BALANCE',\n  InsufficientTakerAllowance = 'INSUFFICIENT_TAKER_ALLOWANCE',\n  InsufficientMakerBalance = 'INSUFFICIENT_MAKER_BALANCE',\n  InsufficientMakerAllowance = 'INSUFFICIENT_MAKER_ALLOWANCE',\n  InsufficientTakerFeeBalance = 'INSUFFICIENT_TAKER_FEE_BALANCE',\n  InsufficientTakerFeeAllowance = 'INSUFFICIENT_TAKER_FEE_ALLOWANCE',\n  InsufficientMakerFeeBalance = 'INSUFFICIENT_MAKER_FEE_BALANCE',\n  InsufficientMakerFeeAllowance = 'INSUFFICIENT_MAKER_FEE_ALLOWANCE',\n  TransactionSenderIsNotFillOrderTaker = 'TRANSACTION_SENDER_IS_NOT_FILL_ORDER_TAKER',\n  MultipleMakersInSingleCancelBatchDisallowed = 'MULTIPLE_MAKERS_IN_SINGLE_CANCEL_BATCH_DISALLOWED',\n  InsufficientRemainingFillAmount = 'INSUFFICIENT_REMAINING_FILL_AMOUNT',\n  MultipleTakerTokensInFillUpToDisallowed = 'MULTIPLE_TAKER_TOKENS_IN_FILL_UP_TO_DISALLOWED',\n  BatchOrdersMustHaveSameExchangeAddress = 'BATCH_ORDERS_MUST_HAVE_SAME_EXCHANGE_ADDRESS',\n  BatchOrdersMustHaveAtLeastOneItem = 'BATCH_ORDERS_MUST_HAVE_AT_LEAST_ONE_ITEM',\n}\n\n// Human Readable Çontract Wrapper Errors\nexport const contractWrappersErrorToHumanReadableError: { [error: string]: string } = {\n  [ContractWrappersError.ExchangeContractDoesNotExist]: 'Exchange contract does not exist',\n  [ContractWrappersError.ZRXContractDoesNotExist]: 'ZRX contract does not exist',\n  [ContractWrappersError.EtherTokenContractDoesNotExist]: 'EtherToken contract does not exist',\n  [ContractWrappersError.TokenTransferProxyContractDoesNotExist]: 'TokenTransferProxy contract does not exist',\n  [ContractWrappersError.TokenRegistryContractDoesNotExist]: 'TokenRegistry contract does not exist',\n  [ContractWrappersError.TokenContractDoesNotExist]: 'Token contract does not exist',\n  [ContractWrappersError.ContractNotDeployedOnNetwork]: 'Contract is not deployed on the detected network',\n  [ContractWrappersError.InsufficientAllowanceForTransfer]: 'Insufficient allowance for transfer',\n  [ContractWrappersError.InsufficientBalanceForTransfer]: 'Insufficient balance for transfer',\n  [ContractWrappersError.InsufficientEthBalanceForDeposit]: 'Insufficient ETH balance for deposit',\n  [ContractWrappersError.InsufficientWEthBalanceForWithdrawal]: 'Insufficient WETH balance for withdrawal',\n  [ContractWrappersError.InvalidJump]: 'Invalid jump occured while executing the transaction',\n  [ContractWrappersError.OutOfGas]: 'Transaction ran out of gas',\n  [ContractWrappersError.SubscriptionNotFound]: 'Subscription not found',\n  [ContractWrappersError.SubscriptionAlreadyPresent]: 'Subscription already present',\n  [OrderError.InvalidSignature]: 'Order signature is not valid',\n  [BlockchainCallErrs.ContractDoesNotExist]: 'Contract does not exist',\n  [BlockchainCallErrs.UserHasNoAssociatedAddresses]: 'User has no addresses available',\n  [BlockchainCallErrs.UnhandledError]: 'Unhandled Error',\n  [BlockchainCallErrs.TokenAddressIsInvalid]: 'Token address is invalid',\n};\n\n// Human Readable Exchange Çontract Errors\nexport const exchangeContractErrorToHumanReadableError: { [error: string]: string } = {\n  [ExchangeContractErrs.OrderFillExpired]: 'This order has expired',\n  [ExchangeContractErrs.OrderCancelExpired]: 'This order has expired',\n  [ExchangeContractErrs.OrderCancelAmountZero]: 'Order cancel amount can\\'t be 0',\n  [ExchangeContractErrs.OrderAlreadyCancelledOrFilled]: 'This order has already been completely filled or cancelled',\n  [ExchangeContractErrs.OrderFillAmountZero]: 'Order fill amount can\\'t be 0',\n  [ExchangeContractErrs.OrderRemainingFillAmountZero]: 'This order has already been completely filled or cancelled',\n  [ExchangeContractErrs.OrderFillRoundingError]: 'Rounding error will occur when filling this order. Please try filling a different amount.',\n  [ExchangeContractErrs.InsufficientTakerBalance]: 'Taker no longer has a sufficient balance to complete this order',\n  [ExchangeContractErrs.InsufficientTakerAllowance]: 'Taker no longer has a sufficient allowance to complete this order',\n  [ExchangeContractErrs.InsufficientMakerBalance]: 'Maker no longer has a sufficient balance to complete this order',\n  [ExchangeContractErrs.InsufficientMakerAllowance]: 'Maker no longer has a sufficient allowance to complete this order',\n  [ExchangeContractErrs.InsufficientTakerFeeBalance]: 'Taker no longer has a sufficient balance to pay fees',\n  [ExchangeContractErrs.InsufficientTakerFeeAllowance]: 'Taker no longer has a sufficient allowance to pay fees',\n  [ExchangeContractErrs.InsufficientMakerFeeBalance]: 'Maker no longer has a sufficient balance to pay fees',\n  [ExchangeContractErrs.InsufficientMakerFeeAllowance]: 'Maker no longer has a sufficient allowance to pay fees',\n  [ExchangeContractErrs.TransactionSenderIsNotFillOrderTaker]: `This order can only be filled by the specified taker`,\n  [ExchangeContractErrs.MultipleMakersInSingleCancelBatchDisallowed]: 'Multiple makes in a single cancel batch are disallowed',\n  [ExchangeContractErrs.InsufficientRemainingFillAmount]: 'Insufficient remaining fill amount',\n  [ExchangeContractErrs.MultipleTakerTokensInFillUpToDisallowed]: 'Multiple taker tokens in a fill up to call are disallowed',\n  [ExchangeContractErrs.BatchOrdersMustHaveSameExchangeAddress]: 'Batch orders must have the same exchange address',\n  [ExchangeContractErrs.BatchOrdersMustHaveAtLeastOneItem]: 'Batch orders cannot by empty',\n};\n","import { RadarError } from './RadarError';\nimport {\n  contractWrappersErrorToHumanReadableError,\n  exchangeContractErrorToHumanReadableError\n} from './ZeroExErrors';\n\nexport const ErrorFormatter = {\n  formatRadarError(error: Error) {\n    const radarErrorMessage =\n      contractWrappersErrorToHumanReadableError[error.message] ||\n      exchangeContractErrorToHumanReadableError[error.message];\n\n    if (radarErrorMessage) {\n      throw new RadarError(radarErrorMessage);\n    }\n    throw error;\n  }\n};\n","// Vendor\nimport {\n  SignedOrder,\n  RadarBook,\n  RadarFill,\n  RadarCandle,\n  RadarTicker,\n  UserOrderType,\n  RadarMarket,\n  WebsocketRequestTopic,\n  WebsocketRequestType,\n  RadarStats,\n  RadarHistory,\n  RadarMarketBase\n} from '@radarrelay/types';\nimport { TransactionReceiptWithDecodedLogs } from 'ethereum-types';\nimport BigNumber from 'bignumber.js';\nimport axios, { AxiosResponse } from 'axios';\n\n// Internal\nimport { Trade } from './Trade';\nimport { WebsocketClient } from './WebsocketClient';\nimport { Opts } from './types';\nimport { ErrorFormatter } from './errors/ErrorFormatter';\nimport { BaseAccount } from './accounts';\n\nexport class Market<T extends BaseAccount> implements RadarMarket, RadarMarketBase {\n\n  // --- Properties --- //\n\n  public id: string;\n  public baseTokenAddress: string;\n  public quoteTokenAddress: string;\n  public baseTokenDecimals: number;\n  public quoteTokenDecimals: number;\n  public minOrderSize: BigNumber;\n  public maxOrderSize: BigNumber;\n  public quoteIncrement: number;\n  public displayName: string;\n  public score: number;\n\n  private _endpoint: string;\n  private _wsEndpoint: string;\n  private _trade: Trade<T>;\n  private _wsClient: WebsocketClient;\n\n  // --- Constructor --- //\n\n  constructor(market: RadarMarket, apiEndpoint: string, wsEndpoint: string, trade: Trade<T>) {\n    // Setup config\n    this._endpoint = apiEndpoint;\n    this._wsEndpoint = wsEndpoint;\n    this._trade = trade;\n    this._wsClient = new WebsocketClient(wsEndpoint);\n\n    // Setup RadarMarket properties\n    this.id = market.id;\n    this.displayName = market.displayName;\n    this.baseTokenAddress = market.baseTokenAddress;\n    this.quoteTokenAddress = market.quoteTokenAddress;\n    this.baseTokenDecimals = Number(market.baseTokenDecimals);\n    this.quoteTokenDecimals = Number(market.quoteTokenDecimals);\n    this.minOrderSize = new BigNumber(market.minOrderSize);\n    this.maxOrderSize = new BigNumber(market.maxOrderSize);\n    this.quoteIncrement = Number(market.quoteIncrement);\n    this.score = market.score;\n  }\n\n  // --- Exposed methods --- //\n\n  /*\n   * Get book for this market\n   */\n  public async getBookAsync(): Promise<RadarBook> {\n    const response: AxiosResponse<RadarBook> = await axios.get(`${this._endpoint}/markets/${this.id}/book`);\n    return response.data;\n  }\n\n  /*\n   * Get fills for this market\n   */\n  public async getFillsAsync(): Promise<RadarFill[]> {\n    const response: AxiosResponse<RadarFill[]> = await axios.get(`${this._endpoint}/markets/${this.id}/fills`);\n    return response.data;\n  }\n\n  /*\n   * Get candles for this market\n   */\n  public async getCandlesAsync(): Promise<RadarCandle[]> {\n    const response: AxiosResponse<RadarCandle[]> = await axios.get(`${this._endpoint}/markets/${this.id}/candles`);\n    return response.data;\n  }\n\n  /*\n   * Get this markets ticker\n   */\n  public async getTickerAsync(): Promise<RadarTicker> {\n    const response: AxiosResponse<RadarTicker> = await axios.get(`${this._endpoint}/markets/${this.id}/ticker`);\n    return response.data;\n  }\n\n  /*\n   * Get this markets stats.\n   */\n  public async getStatsAsync(): Promise<RadarStats> {\n    const response: AxiosResponse<RadarStats> = await axios.get(`${this._endpoint}/markets/${this.id}/stats`);\n    return response.data;\n  }\n\n  /*\n   * Get this markets history.\n   */\n  public async getHistoryAsync(): Promise<RadarHistory> {\n    const response: AxiosResponse<RadarHistory> = await axios.get(`${this._endpoint}/markets/${this.id}/history`);\n    return response.data;\n  }\n\n  /**\n   * subscribe to a socket topic for this market\n   *\n   * @param {WebsocketRequestTopic}  topic  The market topic\n   * @param {(message: any) => void}  handlerFunc The subscription handler\n   */\n  public async subscribeAsync(\n    topic: WebsocketRequestTopic,\n    handlerFunc: (message: any) => void\n  ): Promise<{\n    requestId: number,\n    subscriptionHandler: (message: any) => void,\n    unsubscribe: () => void\n  }> {\n    if (!this._wsClient.connected) {\n      await this._wsClient.connect();\n    }\n    return this._wsClient.subscribe({\n       type: WebsocketRequestType.SUBSCRIBE,\n       topic,\n       market: this.id\n     }, handlerFunc);\n  }\n\n  /**\n   * Execute a market order\n   *\n   * @param {UserOrderType} type   Order type of BUY|SELL\n   * @param {BigNumber}     amount Amount in base token\n   * @param {Opts}          [opts]   Optional transaction options\n   */\n  public async marketOrderAsync(\n    type: UserOrderType,\n    amount: BigNumber,\n    opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    try {\n      return await this._trade.marketOrder(this, type, amount, opts);\n    } catch (err) {\n      ErrorFormatter.formatRadarError(err);\n    }\n  }\n\n  /**\n   * Place a limit order\n   *\n   * @param {UserOrderType} type       Order type of BUY|SELL\n   * @param {BigNumber}     quantity   Amount in base token\n   * @param {BigNumber}     price      Price in quote\n   * @param {BigNumber}     expiration Order expiration time in seconds\n   */\n  public async limitOrderAsync(\n    type: UserOrderType,\n    quantity: BigNumber,\n    price: BigNumber,\n    expiration: BigNumber\n  ): Promise<SignedOrder> {\n    try {\n      return await this._trade.limitOrder(this, type, quantity, price, expiration);\n    } catch (err) {\n      ErrorFormatter.formatRadarError(err);\n    }\n  }\n\n  /**\n   * Cancel an order\n   *\n   * @param {SignedOrder}  order SignedOrder to cancel\n   * @param {Opts}         [opts]  Optional transaction options\n   */\n  public async cancelOrderAsync(\n    order: SignedOrder,\n    opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    try {\n      return await this._trade.cancelOrderAsync(order, opts);\n    } catch (err) {\n      ErrorFormatter.formatRadarError(err);\n    }\n  }\n\n}\n","// Vendor\nimport axios, { AxiosResponse } from 'axios';\n\ntype MockES6Map<T, K> = Pick<\n  Map<T, K>,\n  Exclude<keyof Map<T, K>, 'get' | 'set'>\n>;\n\nexport abstract class PaginatedCache<ValueType>\nimplements\n  Iterable<[string, ValueType]>,\n  MockES6Map<string, ValueType> {\n\n  // --- Properties --- //\n\n  public page: number;\n  public perPage: number;\n\n  protected _cache: Map<string, ValueType>;\n  protected _endpoint: string;\n\n  // --- Constructor --- //\n\n  constructor(\n    initialPage: number,\n    perPage: number,\n    endpoint: string,\n  ) {\n    this._cache = new Map();\n    this._endpoint = endpoint;\n    this.page = initialPage;\n    this.perPage = perPage;\n  }\n\n  // --- Getters/setters --- //\n\n  public get cache() {\n    return new Map(this._cache);\n  }\n\n  // --- Exposed methods --- //\n\n  public async getPageAsync<T>(page: number, perPage: number) {\n    const response = await axios.get<T[]>(this._endpoint, {\n      params: { page, perPage }\n    });\n\n    return this._cacheResponseData<T[]>(response);\n  }\n\n  public async getNextPageAsync() {\n    const data = await this.getPageAsync(this.page, this.perPage);\n    this.page++;\n    return data;\n  }\n\n  // --- Mock relevant ES6 Map properties/methods--- //\n\n  public get size() {\n    return this._cache.size;\n  }\n\n  public clear() {\n    return this._cache.clear();\n  }\n\n  public delete(key: string) {\n    return this._cache.delete(key);\n  }\n\n  public forEach(\n    callbackfn: (value: ValueType, key: string, map: Map<string, ValueType>) => void,\n    thisArg?: any\n  ) {\n    return this._cache.forEach(callbackfn, thisArg);\n  }\n\n  public entries() {\n    return this._cache.entries();\n  }\n\n  public values() {\n    return this._cache.values();\n  }\n\n  public has(key: string) {\n    return this._cache.has(key);\n  }\n\n  public keys() {\n    return this._cache.keys();\n  }\n\n  public [Symbol.iterator]() {\n    return this._cache.entries();\n  }\n\n  // --- Internal protected methods --- //\n\n  protected _cacheResponseData<T>(response: AxiosResponse<T>): Map<string, ValueType> {\n    const data = new Map<string, ValueType>();\n\n    if (Array.isArray(response.data)) {\n\n      response.data.forEach(item => {\n        const transformedData = this._transformResponseData(item);\n        data.set(transformedData[0], transformedData[1]);\n        this._cache.set(transformedData[0], transformedData[1]);\n      });\n\n    } else {\n\n      const transformedData = this._transformResponseData(response.data);\n      data.set(transformedData[0], transformedData[1]);\n      this._cache.set(transformedData[0], transformedData[1]);\n\n    }\n\n    return data;\n  }\n\n  // --- Declare abstract methods --- //\n\n  protected abstract _transformResponseData<T>(data: T): [string, ValueType];\n\n}\n","// Vendor\nimport { RadarMarket } from '@radarrelay/types';\nimport axios, { AxiosResponse } from 'axios';\n\n// Internal\nimport { Market } from '../Market';\nimport { BaseAccount } from '../accounts';\nimport { Trade } from '../Trade';\nimport { PaginatedCache } from './PaginatedCache';\n\nexport class MarketsCache<T extends BaseAccount> extends PaginatedCache<Market<T>> {\n\n  // --- Properties --- //\n\n  private _apiEndpoint: string;\n  private _wsEndpoint: string;\n  private _trade: Trade<T>;\n\n  // --- Constructor --- //\n\n  constructor(\n    initialPage: number,\n    perPage: number,\n    apiEndpoint: string,\n    wsEndpoint: string,\n    marketsEndpoint: string,\n    trade: Trade<T>\n  ) {\n    super(initialPage, perPage, marketsEndpoint);\n\n    this._apiEndpoint = apiEndpoint;\n    this._wsEndpoint = wsEndpoint;\n    this._trade = trade;\n  }\n\n  // --- Exposed methods --- //\n\n  public async getAsync(marketId: string): Promise<Market<T>>;\n  public async getAsync(marketId: string[]): Promise<Map<string, Market<T>>>;\n  public async getAsync<K extends string | string[]>(marketId: K): Promise<Market<T> | Map<string, Market<T>>> {\n    let response;\n\n    if (!Array.isArray(marketId)) {\n\n      if (this._cache.has(marketId as string)) return this._cache.get(marketId as string);\n      response = await axios.get(`${this._endpoint}/${marketId}`);\n      return this._cacheResponseData<RadarMarket>(response as AxiosResponse<RadarMarket>).get(marketId as string);\n\n    } else {\n\n      // TODO: retrieve from cache if a market is already fetched.\n      response = await axios.get(this._endpoint, {\n        params: { ids: (marketId as string[]).join(',') },\n      });\n\n      return this._cacheResponseData<RadarMarket[]>(response as AxiosResponse<RadarMarket[]>);\n\n    }\n  }\n\n  // --- Abstract method implementation --- //\n\n  protected _transformResponseData<RadarMarket>(market): [string, Market<any>] {\n    return [market.id, new Market(market, this._apiEndpoint, this._wsEndpoint, this._trade)];\n  }\n}\n","\n// Vendor\nimport { EventEmitter } from 'events';\nimport { RadarToken } from '@radarrelay/types';\nimport BigNumber from 'bignumber.js';\nimport axios, { AxiosResponse } from 'axios';\nimport Web3 = require('web3');\n\n// Internal\nimport {\n  InjectedWalletConfig,\n  WalletType,\n  Config,\n  AccountParams,\n  EventName,\n  SdkError\n} from './types';\nimport { ZeroEx } from './ZeroEx';\nimport { SdkInitLifeCycle, InitPriorityItem } from './SdkInitLifeCycle';\nimport { Ethereum } from './Ethereum';\nimport { Trade } from './Trade';\nimport { RADAR_RELAY_ENDPOINTS } from './constants';\nimport { BaseAccount } from './accounts/BaseAccount';\nimport { MarketsCache } from './pagination/MarketsCache';\n\nBigNumber.config({ EXPONENTIAL_AT: 1e+9 });\n\n/**\n * RadarRelay main SDK singleton\n */\nexport class RadarRelay<T extends BaseAccount> {\n\n  // --- Properties --- //\n\n  public events: EventEmitter;\n  public account: T;\n  public tokens: Map<string, RadarToken>;\n  public zeroEx: ZeroEx;\n  public web3: Web3;\n  public markets: MarketsCache<T>;\n\n  private _trade: Trade<T>;\n  private _ethereum: Ethereum;\n  private _networkId: number;\n  private _lifecycle: SdkInitLifeCycle;\n  private _wallet: new (params: AccountParams) => T;\n  private _config: Config;\n  private _walletType: WalletType;\n\n  /**\n   * The load priority list maintains the function call\n   * priority for each init method in the RadarRelaySDK class.\n   * It is utilized by the SdkInitLifeCycle\n   *\n   * This list is configurable if additional init methods are necessary\n   */\n  private loadPriorityList: InitPriorityItem[] = [\n    { event: EventName.EthereumInitialized, func: this.initEthereumNetworkIdAsync },\n    { event: EventName.EthereumNetworkIdInitialized, func: this.initZeroEx },\n    { event: EventName.ZeroExInitialized, func: this.initTokensAsync },\n    { event: EventName.TokensInitialized, func: this.initAccountAsync, args: [0] }, // Pass default account of 0 to setAccount(...)\n    { event: EventName.AccountInitialized, func: this.initTrade },\n    { event: EventName.TradeInitialized, func: this.initMarketsAsync },\n    { event: EventName.MarketsInitialized, func: undefined}\n  ];\n\n  // --- Constructor --- //\n\n  /**\n   * SDK instance\n   *\n   * @param {RadarRelayConfig} config  sdk config\n   */\n  constructor(wallet: new (params: AccountParams) => T, walletType: WalletType, config: Config) {\n    this._wallet = wallet;\n    this._walletType = walletType;\n    this._config = config;\n\n    // Instantiate event handler\n    this.events = new EventEmitter();\n\n    // Instantiate ethereum class\n    this._ethereum = new Ethereum();\n\n    // setup the _lifecycle\n    this._lifecycle = new SdkInitLifeCycle(this.events, this.loadPriorityList, config.sdkInitializationTimeoutMs);\n    this._lifecycle.setup(this);\n  }\n\n  /**\n   * Initialize the SDK\n   *\n   * @param {Config} config The wallet configuration\n   */\n  public async initializeAsync(): Promise<RadarRelay<T>> {\n    await this._ethereum.setProvider(this._walletType, this._config);\n\n    // Allow access to web3 object\n    this.web3 = this._ethereum.web3;\n\n    await this.setEndpointOrThrowAsync();\n    await this.getCallback(EventName.EthereumInitialized, this._ethereum);\n\n    return this;\n  }\n\n  // --- Initialization methods, not user configurable below this line --- //\n\n  private async initAccountAsync(address: string | number): Promise<string | boolean> {\n    await this._ethereum.setDefaultAccount(address);\n    this.account = new this._wallet({\n      ethereum: this._ethereum,\n      events: this.events,\n      zeroEx: this.zeroEx,\n      endpoint: this._config.radarRestEndpoint,\n      tokens: this.tokens\n    });\n    return this.getCallback(EventName.AccountInitialized, this.account);\n  }\n\n  private async initEthereumNetworkIdAsync(): Promise<string | boolean> {\n    this._networkId = await this._ethereum.getNetworkIdAsync.apply(this._ethereum);\n    return this.getCallback(EventName.EthereumNetworkIdInitialized, this._networkId);\n  }\n\n  private initZeroEx(): Promise<string | boolean> {\n    this.zeroEx = new ZeroEx(this._ethereum.web3.currentProvider, {\n      networkId: this._networkId\n    });\n    return this.getCallback(EventName.ZeroExInitialized, this.zeroEx);\n  }\n\n  private initTrade(): Promise<string | boolean> {\n    this._trade = new Trade<T>(this.zeroEx, this._config.radarRestEndpoint, this.account, this.events);\n    return this.getCallback(EventName.TradeInitialized, this._trade);\n  }\n\n  private async initTokensAsync(): Promise<string | boolean> {\n    // Only fetch if not already fetched\n    if (!this.tokens || !this.tokens.size) {\n      const response: AxiosResponse<RadarToken[]> = await axios.get(`${this._config.radarRestEndpoint}/tokens`);\n      const tokens = response.data;\n\n      const entries = tokens.map(token => [token.address, token]);\n      this.tokens = new Map(entries as any);\n\n      tokens.map(token => this.tokens.set(token.address, token));\n    }\n\n    // TODO: index by address\n    return this.getCallback(EventName.TokensInitialized, this.tokens);\n  }\n\n  private async initMarketsAsync(): Promise<string | boolean> {\n    // Instantiate markets pagination helper\n    this.markets = new MarketsCache(\n      1, // Starting page... TODO: make this configurable at the SDK-level\n      100, // Results per page... TODO: make this configurable at the SDK-level\n      this._config.radarRestEndpoint,\n      this._config.radarWebsocketEndpoint,\n      `${this._config.radarRestEndpoint}/markets`,\n      this._trade\n    );\n\n    await this.markets.getAsync('ZRX-WETH');\n    await this.markets.getNextPageAsync();\n\n    return this.getCallback(EventName.MarketsInitialized, this.markets);\n  }\n\n  private getCallback(event, data): Promise<string | boolean> {\n    const callback = this._lifecycle.promise(event);\n    this.events.emit(event, data);\n    return callback;\n  }\n\n  private async setEndpointOrThrowAsync() {\n    const walletConfig = this._config as InjectedWalletConfig;\n    if (this._walletType === WalletType.Injected && !walletConfig.dataRpcUrl) {\n      // Set Radar Relay API Endpoints if using injected provider\n      const { radarRestEndpoint, radarWebsocketEndpoint } = RADAR_RELAY_ENDPOINTS(await this._ethereum.getNetworkIdAsync());\n      this._config.radarRestEndpoint = radarRestEndpoint;\n      this._config.radarWebsocketEndpoint = radarWebsocketEndpoint;\n    }\n\n    if (!this._config.radarRestEndpoint || !this._config.radarWebsocketEndpoint) {\n      throw new Error(SdkError.InvalidOrMissingEndpoints);\n    }\n  }\n}\n","// Vendor\nimport { promisify } from 'util';\nimport { TransactionReceiptWithDecodedLogs } from 'ethereum-types';\nimport BigNumber from 'bignumber.js';\nimport axios, { AxiosResponse } from 'axios';\nimport { RadarFill, RadarSignedOrder, RadarToken } from '@radarrelay/types';\nimport { EventEmitter } from 'events';\n\n// Internal\nimport { Ethereum } from '../Ethereum';\nimport { ZeroEx } from '../ZeroEx';\nimport { Opts, AccountParams, WalletType } from '../types';\n\nexport class BaseAccount {\n\n  // --- Properties --- //\n\n  public readonly type: WalletType;\n  public address: string;\n\n  protected _ethereum: Ethereum;\n  protected _events: EventEmitter;\n\n  private _zeroEx: ZeroEx;\n  private _endpoint: string;\n  private _tokens: Map<string, RadarToken>;\n\n  // --- Constructor --- //\n\n  /**\n   * Instantiate a BaseAccount.\n   *\n   * @param {AccountParams} params The account parameters\n   */\n  constructor(params: AccountParams) {\n    this._ethereum = params.ethereum;\n    this._events = params.events;\n    this._zeroEx = params.zeroEx;\n    this._endpoint = params.endpoint;\n    this._tokens = params.tokens;\n    this.address = this._ethereum.defaultAccount;\n  }\n\n  // --- Exposed methods --- //\n\n  /**\n   * Get available addresses for this account.\n   */\n  public async getAvailableAddressesAsync(): Promise<string[]> {\n    return await promisify(this._ethereum.web3.eth.getAccounts)();\n  }\n\n  /**\n   * Get ETH balance for the current selected address.\n   */\n  public async getEthBalanceAsync(): Promise<BigNumber> {\n    const balance = await this._ethereum.getEthBalanceAsync(this.address);\n    return ZeroEx.toUnitAmount(balance, 18);\n  }\n\n  /**\n   * Transfer ETH to another address.\n   *\n   * @param {string} toAddress The address to transfer to.\n   * @param {BigNumber} amount The amount of ETH to transfer.\n   * @param {Opts} [opts] The transaction options.\n   */\n  public async transferEthAsync(\n    toAddress: string, amount: BigNumber, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const txOpts = {\n      gasPrice: opts.transactionOpts ? opts.transactionOpts.gasPrice : undefined,\n      gas: opts.transactionOpts ? opts.transactionOpts.gasLimit : undefined\n    };\n    const txHash = await this._ethereum.transferEthAsync(this.address, toAddress, amount, txOpts);\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    return await this._zeroEx.awaitTransactionMinedAsync(txHash);\n  }\n\n  /**\n   * Wrap ETH to convert it to WETH.\n   *\n   * @param {BigNumber} amount The amount of ETH to wrap.\n   * @param {Opts} [opts] The transaction options.\n   */\n  public async wrapEthAsync(\n    amount: BigNumber, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const txHash = await this._zeroEx.etherToken.depositAsync(\n      this._getWETHTokenAddress(), ZeroEx.toBaseUnitAmount(amount, 18), this.address, opts.transactionOpts\n    );\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    return await this._zeroEx.awaitTransactionMinedAsync(txHash);\n  }\n\n  /**\n   * Unwrap WETH to convert it to ETH.\n   *\n   * @param {BigNumber} amount The amount of WETH to unwrap.\n   * @param {Opts} [opts] The transaction options.\n   */\n  public async unwrapEthAsync(\n    amount: BigNumber, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const txHash = await this._zeroEx.etherToken.withdrawAsync(\n      this._getWETHTokenAddress(), ZeroEx.toBaseUnitAmount(amount, 18), this.address, opts.transactionOpts);\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    return await this._zeroEx.awaitTransactionMinedAsync(txHash);\n  }\n\n  /**\n   * Get balance of a token for the current selected address.\n   *\n   * @param {string} tokenAddress The token address.\n   */\n  public async getTokenBalanceAsync(tokenAddress: string): Promise<BigNumber> {\n    const balance = await this._zeroEx.erc20Token.getBalanceAsync(tokenAddress, this.address);\n    return ZeroEx.toUnitAmount(balance, (await this._tokens.get(tokenAddress)).decimals);\n  }\n\n  /**\n   * Transfer tokens to another address.\n   *\n   * @param {string} tokenAddress The token address.\n   * @param {string} toAddress The address to transfer to.\n   * @param {BigNumber} amount The amount of token to transfer.\n   * @param {Opts} [opts] The transaction options.\n   */\n  public async transferTokenAsync(\n    tokenAddress: string, toAddress: string, amount: BigNumber, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const amt = ZeroEx.toBaseUnitAmount(amount, (await this._tokens.get(tokenAddress)).decimals);\n    const txHash = await this._zeroEx.erc20Token.transferAsync(tokenAddress, this.address, toAddress, amt, opts.transactionOpts);\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    return await this._zeroEx.awaitTransactionMinedAsync(txHash);\n  }\n\n  /**\n   * Get a token allowance.\n   *\n   * @param {string} tokenAddress The token address.\n   */\n  public async getTokenAllowanceAsync(tokenAddress: string): Promise<BigNumber> {\n    const baseUnitallowance = await this._zeroEx.erc20Token.getProxyAllowanceAsync(tokenAddress, this.address);\n    return ZeroEx.toUnitAmount(baseUnitallowance, (await this._tokens.get(tokenAddress)).decimals);\n  }\n\n  /**\n   * Set a token allowance.\n   *\n   * @param {string} tokenAddress The token address.\n   * @param {BigNumber} amount The allowance amount.\n   * @param {Opts} [opts] The transaction options.\n   */\n  public async setTokenAllowanceAsync(\n    tokenAddress: string, amount: BigNumber, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const amt = ZeroEx.toBaseUnitAmount(amount, (await this._tokens.get(tokenAddress)).decimals);\n    const txHash = await this._zeroEx.erc20Token.setProxyAllowanceAsync(tokenAddress, this.address, amt, opts.transactionOpts);\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    return await this._zeroEx.awaitTransactionMinedAsync(txHash);\n  }\n\n  /**\n   * Set unlimited token allowance.\n   *\n   * @param {string} tokenAddress The token address.\n   * @param {Opts} [opts] The transaction options.\n   */\n  public async setUnlimitedTokenAllowanceAsync(\n    tokenAddress: string, opts?: Opts\n  ): Promise<TransactionReceiptWithDecodedLogs | string> {\n    if (!opts) {\n      opts = {};\n    }\n\n    const txHash = await this._zeroEx.erc20Token.setUnlimitedProxyAllowanceAsync(tokenAddress, this.address, opts.transactionOpts);\n    if (!opts.awaitTransactionMined) {\n      return txHash;\n    }\n    return await this._zeroEx.awaitTransactionMinedAsync(txHash);\n  }\n\n  /**\n   * Get orders for the selected address that have been placed on Radar.\n   *\n   * @param {number} page The page to fetch.\n   * @param {number} perPage The number of orders per page.\n   */\n  public async getOrdersAsync(page: number = 1, perPage: number = 100): Promise<RadarSignedOrder[]> {\n    const response: AxiosResponse<RadarSignedOrder[]> = await axios.get(\n      `${this._endpoint}/accounts/${this.address}/orders`, {\n        params: { page, perPage },\n      }\n    );\n\n    return response.data;\n  }\n\n  /**\n   * Get fills for the selected address that have been executed on Radar.\n   *\n   * @param {number} page The page to fetch.\n   * @param {number} perPage The number of fills per page.\n   */\n  public async getFillsAsync(page: number = 1, perPage: number = 100): Promise<RadarFill[]> {\n    const response: AxiosResponse<RadarFill[]> = await axios.get(\n      `${this._endpoint}/accounts/${this.address}/fills`, {\n        params: { page, perPage },\n      }\n    );\n\n    return response.data;\n  }\n\n  // --- Internal methods --- //\n\n  private _getWETHTokenAddress(): string {\n    let token;\n    this._tokens.forEach(t => {\n      if (t.symbol === 'WETH') {\n        token = t;\n      }\n    });\n    return token.address;\n  }\n}\n","import { BaseAccount } from './BaseAccount';\nimport { WalletType, AccountParams } from '../types';\nimport { LightWallet } from '@radarrelay/wallet-manager';\n\nexport class LocalAccount extends BaseAccount {\n\n  // --- Properties --- //\n\n  public readonly type = WalletType.Local;\n\n  private _wallet: LightWallet;\n\n  // --- Constructor --- //\n\n  /**\n   * Instantiate a LocalAccount.\n   *\n   * @param {AccountParams} params The account params\n   */\n  constructor(params: AccountParams) {\n    super(params);\n\n    this._wallet = this._ethereum.wallet; // This probably shouldn't be held on Ethereum\n  }\n\n  // --- Exposed methods --- //\n\n  /**\n   * Export an account wallet seed phrase.\n   *\n   * @param {string} password The plaintext password.\n   */\n  public async exportSeedPhraseAsync(password: string): Promise<string> {\n    if (!this._wallet) return '';\n    return await this._wallet.exportSeedPhraseAsync(password);\n  }\n\n  /**\n   * Export a wallet address private key.\n   *\n   * @param {string} password The plaintext password.\n   */\n  public async exportAddressPrivateKeyAsync(password: string): Promise<string> {\n    if (!this._wallet) return '';\n    return await this._wallet.exportAccountPrivateKeyAsync(this.address, password);\n  }\n\n  /**\n   * Set the current address in use.\n   *\n   * @param {string|number} address The address or address index.\n   */\n  public async setAddressAsync(address: string | number) {\n    await this._ethereum.setDefaultAccount(address);\n    this.address = this._ethereum.defaultAccount;\n  }\n\n  /**\n   * Add new addresses for this account.\n   *\n   * @param {number} num The number of addresses to add.\n   */\n  public addNewAddresses(num: number): void {\n    this._wallet.addNewAccounts(num);\n  }\n}\n","import { BaseAccount } from './BaseAccount';\nimport { WalletType } from '../types';\n\nexport class RpcAccount extends BaseAccount {\n  public readonly type = WalletType.Rpc;\n}\n","import { BaseAccount } from './BaseAccount';\nimport { WalletType, AccountParams, EventName } from '../types';\n\nexport class InjectedAccount extends BaseAccount {\n\n  // --- Properties --- //\n\n  public readonly type = WalletType.Injected;\n\n  // --- Constructor --- //\n\n  /**\n   * Instantiate an InjectedAccount.\n   *\n   * @param {AccountParams} params The account parameters.\n   */\n  constructor(params: AccountParams) {\n    super(params);\n    this._watchActiveAddress();\n  }\n\n  // --- Internal methods --- //\n\n  /**\n   * Watch the active address and update if necessary.\n   */\n  private _watchActiveAddress() {\n    setInterval(async () => {\n      if (this._ethereum.web3.eth.accounts[0] !== this.address) {\n        this.address = this._ethereum.web3.eth.accounts[0];\n        this._events.emit(EventName.AddressChanged, this.address);\n      }\n    }, 500);\n  }\n}\n","export { BaseAccount } from './BaseAccount';\nexport { LocalAccount } from './LocalAccount';\nexport { RpcAccount } from './RpcAccount';\nexport { InjectedAccount } from './InjectedAccount';\n","// Internal\nimport { RadarRelay } from './RadarRelay';\nimport { LocalAccount, RpcAccount, InjectedAccount } from './accounts';\nimport {\n  Config,\n  LightWalletConfig,\n  RpcWalletConfig,\n  InjectedWalletConfig,\n  WalletType,\n  Account} from './types';\n\nexport class SdkManager {\n\n  // --- Properties --- //\n\n  // Setup method signatures\n  public static Setup(config: LightWalletConfig): RadarRelay<LocalAccount>;\n  public static Setup(config: RpcWalletConfig): RadarRelay<RpcAccount>;\n  public static Setup(config: InjectedWalletConfig): RadarRelay<InjectedAccount>;\n\n  // --- Exposed static methods --- //\n\n  /**\n   * Create the SDK instance without starting the initialization lifecycle.\n   * This allows event listeners to be attached before the starting the lifecycle.\n   *\n   * @param {Config} config Wallet configuration options\n   */\n  public static Setup(config: Config) {\n    if ((config as LightWalletConfig).wallet) {\n      return new RadarRelay(LocalAccount, WalletType.Local, config);\n    }\n\n    if ((config as RpcWalletConfig).rpcUrl) {\n      return new RadarRelay(RpcAccount, WalletType.Rpc, config);\n    }\n\n    if ((config as InjectedWalletConfig).type) {\n      return new RadarRelay(InjectedAccount, WalletType.Injected, config);\n    }\n  }\n\n  /**\n   * Start the initialization lifecycle for the SDK instance that was created using Setup\n   *\n   * @param {RadarRelayConfig} rrConfig Radar Relay configuration options\n   * @param {Config} walletConfig Wallet specific configuration options\n   */\n  public static async InitializeAsync(sdkInstance: RadarRelay<Account>) {\n    await sdkInstance.initializeAsync();\n  }\n\n  // Setup & Initialize method signatures\n  public static async SetupAndInitializeAsync(config: LightWalletConfig): Promise<RadarRelay<LocalAccount>>;\n  public static async SetupAndInitializeAsync(config: RpcWalletConfig): Promise<RadarRelay<RpcAccount>>;\n  public static async SetupAndInitializeAsync(config: InjectedWalletConfig): Promise<RadarRelay<InjectedAccount>>;\n\n  /**\n   * Create the SDK instance and run the initialization lifecycle\n   *\n   * @param {Config} config Wallet configuration options\n   */\n  public static async SetupAndInitializeAsync(config: Config) {\n    if ((config as LightWalletConfig).wallet) {\n      return await new RadarRelay(LocalAccount, WalletType.Local, config).initializeAsync();\n    }\n\n    if ((config as RpcWalletConfig).rpcUrl) {\n      return await new RadarRelay(RpcAccount, WalletType.Rpc, config).initializeAsync();\n    }\n\n    if ((config as InjectedWalletConfig).type) {\n      return await new RadarRelay(InjectedAccount, WalletType.Injected, config).initializeAsync();\n    }\n  }\n}\n","export { MarketsCache } from './MarketsCache';\n","export { SdkManager } from './SdkManager';\nexport { RadarRelay } from './RadarRelay';\nexport { Ethereum } from './Ethereum';\nexport { Market } from './Market';\nexport { Trade } from './Trade';\nexport { WebsocketClient } from './WebsocketClient';\nexport { ZeroEx } from './ZeroEx';\nexport * from './pagination';\nexport * from './accounts';\nexport * from './types';\n"]}